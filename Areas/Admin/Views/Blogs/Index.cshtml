@model GoatSilencerArchitecture.Utilities.PaginatedList<GoatSilencerArchitecture.Models.BlogComponent>

@section Styles {
    <link rel="stylesheet" href="~/css/Admin/Projects/Shared.css" asp-append-version="true" />
}

@{
    ViewData["Title"] = "Blog Components";
    var currentSort = ViewData["CurrentSort"] as string;

    string GetSortIndicator(string sortParam)
    {
        // Default sort = Id asc
        if (string.IsNullOrEmpty(currentSort) && sortParam == "Id")
            return " &#9650;";

        // Map column -> controller sort keys
        string ascParam = sortParam switch
        {
            "Id" => "",             // Id uses "" for asc
            "Title" => "Title",
            "CreatedUtc" => "Date",
            "UpdatedUtc" => "updated_date",
            _ => ""
        };

        string descParam = sortParam switch
        {
            "Id" => "id_desc",
            "Title" => "title_desc",
            "CreatedUtc" => "date_desc",
            "UpdatedUtc" => "updated_date_desc",
            _ => ""
        };

        if (currentSort == ascParam)
            return " &#9650;"; // Ascending
        if (currentSort == descParam)
            return " &#9660;"; // Descending

        return "";
    }

    string GetSortClass(string sortParam)
    {
        // Default sort = Id asc
        if (string.IsNullOrEmpty(currentSort) && sortParam == "Id")
            return "sort-active";

        string ascParam = sortParam switch
        {
            "Id" => "",
            "Title" => "Title",
            "CreatedUtc" => "Date",
            "UpdatedUtc" => "updated_date",
            _ => ""
        };

        string descParam = sortParam switch
        {
            "Id" => "id_desc",
            "Title" => "title_desc",
            "CreatedUtc" => "date_desc",
            "UpdatedUtc" => "updated_date_desc",
            _ => ""
        };

        if (currentSort == ascParam || currentSort == descParam)
            return "sort-active";

        return "";
    }
}

<h1>Blog Components</h1>

<p>
    <a asp-action="Create" class="btn btn-primary">Create New</a>
</p>

<form asp-action="Index" method="get">
    <div class="form-actions no-color">
        <p>
            Find by ID or Title:
            <input type="text" name="SearchString" value="@ViewData["CurrentFilter"]" />
            <input type="submit" value="Search" class="btn btn-default" /> |
            <a asp-action="Index">Back to Full List</a>
        </p>
    </div>
</form>

<table class="table table-striped align-middle">
    <thead>
        <tr>
            <th class="@GetSortClass("Id")">
                <a asp-action="Index"
                   asp-route-sortOrder="@ViewData["IdSortParm"]"
                   asp-route-currentFilter="@ViewData["CurrentFilter"]"
                   class="sort-link">
                    @Html.DisplayNameFor(model => model.FirstOrDefault().Id)
                    @Html.Raw(GetSortIndicator("Id"))
                </a>
            </th>
            <th class="@GetSortClass("Title")">
                <a asp-action="Index"
                   asp-route-sortOrder="@ViewData["TitleSortParm"]"
                   asp-route-currentFilter="@ViewData["CurrentFilter"]"
                   class="sort-link">
                    @Html.DisplayNameFor(model => model.FirstOrDefault().Title)
                    @Html.Raw(GetSortIndicator("Title"))
                </a>
            </th>
            <th class="@GetSortClass("CreatedUtc")">
                <a asp-action="Index"
                   asp-route-sortOrder="@ViewData["CreatedUtcSortParm"]"
                   asp-route-currentFilter="@ViewData["CurrentFilter"]"
                   class="sort-link">
                    @Html.DisplayNameFor(model => model.FirstOrDefault().CreatedUtc)
                    @Html.Raw(GetSortIndicator("CreatedUtc"))
                </a>
            </th>
            <th class="@GetSortClass("UpdatedUtc")">
                <a asp-action="Index"
                   asp-route-sortOrder="@ViewData["UpdatedUtcSortParm"]"
                   asp-route-currentFilter="@ViewData["CurrentFilter"]"
                   class="sort-link">
                    @Html.DisplayNameFor(model => model.FirstOrDefault().UpdatedUtc)
                    @Html.Raw(GetSortIndicator("UpdatedUtc"))
                </a>
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>@Html.DisplayFor(modelItem => item.Id)</td>
                <td>@Html.DisplayFor(modelItem => item.Title)</td>
                <td>@Html.DisplayFor(modelItem => item.CreatedUtc)</td>
                <td>@Html.DisplayFor(modelItem => item.UpdatedUtc)</td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-sm btn-outline-primary">Edit</a>
                    <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-sm btn-outline-danger">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>

@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<div class="d-flex justify-content-between mt-3">
    <a asp-action="Index"
       asp-route-sortOrder="@ViewData["CurrentSort"]"
       asp-route-pageNumber="@(Model.PageIndex - 1)"
       asp-route-currentFilter="@ViewData["CurrentFilter"]"
       class="btn btn-default @prevDisabled">
        Previous
    </a>
    <a asp-action="Index"
       asp-route-sortOrder="@ViewData["CurrentSort"]"
       asp-route-pageNumber="@(Model.PageIndex + 1)"
       asp-route-currentFilter="@ViewData["CurrentFilter"]"
       class="btn btn-default @nextDisabled">
        Next
    </a>
</div>
