@model GoatSilencerArchitecture.Models.BlogComponent

@{
    ViewData["Title"] = "Edit Blog Component";
}

<h1>Edit Blog Component</h1>
<hr />

<div class="row">
    <div class="col-md-10">
        <form asp-action="Edit" method="post" enctype="multipart/form-data" id="edit-form">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />
            <input type="hidden" asp-for="SortOrder" />

            <div class="form-group">
                <label asp-for="Title" class="control-label"></label>
                <input asp-for="Title" class="form-control" />
                <span asp-validation-for="Title" class="text-danger"></span>
            </div>

            <!-- Layout Type -->
            <div class="form-group">
                <label asp-for="LayoutType" class="control-label"></label>
                <select asp-for="LayoutType" class="form-control" id="LayoutType" disabled>
                    <option value="layout-type-1">Layout Type 1 (Text Left, Image Right)</option>
                    <option value="layout-type-2">Layout Type 2 (Image Left, Text Right)</option>
                    <option value="layout-type-3">Layout Type 3 (Image Left, Text Middle, Image Right)</option>
                    <option value="layout-type-4">Layout Type 4 (Image Top Right, Text Spill Left)</option>
                    <option value="layout-type-5">Layout Type 5 (Image Top Left, Text Spill Right)</option>
                    <option value="layout-type-6">Layout Type 6 (100% Text)</option>
                    <option value="layout-type-7">Layout Type 7 (100% Picture)</option>
                    <option value="layout-type-8">Layout Type 8 (Gallery)</option>
                </select>
                <input type="hidden" asp-for="LayoutType" />
                <span asp-validation-for="LayoutType" class="text-danger"></span>
            </div>

            <!-- Text -->
            <div class="form-group" id="textContentGroup">
                <label asp-for="TextContent" class="control-label"></label>
                <textarea asp-for="TextContent" class="form-control rich-text-editor" rows="10"></textarea>
                <span asp-validation-for="TextContent" class="text-danger"></span>
            </div>

            <!-- Image 1 -->
            <div class="form-group" id="image1Group">
                <label>Image 1</label>
                <input type="file" name="image1File" id="image1File" class="form-control" />
                <div class="mt-2">
                    <img src="@Model.Image1Path" id="image1Preview" alt="" style="max-width:200px; @(string.IsNullOrEmpty(Model.Image1Path) ? "display:none;" : "")" />
                </div>
            </div>

            <!-- Image 2 -->
            <div class="form-group" id="image2Group">
                <label>Image 2 (for Layout Type 3)</label>
                <input type="file" name="image2File" id="image2File" class="form-control" />
                <div class="mt-2">
                    <img src="@Model.Image2Path" id="image2Preview" alt="" style="max-width:200px; @(string.IsNullOrEmpty(Model.Image2Path) ? "display:none;" : "")" />
                </div>
            </div>

            <!-- Gallery -->
            <div class="form-group" id="galleryGroup">
                <label class="control-label">Gallery Images</label>
                <input type="file" name="images" multiple class="form-control" id="images" />
                <div id="images-list" class="row mt-2">
                    @if (Model.Images != null && Model.Images.Any())
                    {
                        foreach (var img in Model.Images.OrderBy(i => i.SortOrder))
                        {
                            <div class="col-md-3 image-item mb-2">
                                <img src="@img.ImageUrl" alt="@img.AltText" class="thumb-img"
                                     style="width:200px;height:120px;object-fit:cover;" />
                                <button type="button" class="btn btn-warning btn-sm mt-1 remove-btn">Remove</button>
                                <input type="hidden" name="existingImages" value="@img.ImageUrl" />
                            </div>
                        }
                    }
                </div>
            </div>

            <div class="form-group mt-3">
                <input type="submit" value="Save" class="btn btn-primary" />
                <button type="button" id="preview-button" class="btn btn-info">Preview Blog</button>
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

<div id="preview-popup" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 1000;">
    <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: white; padding: 20px; width: 80%; height: 80%; overflow: auto;">
        <button id="close-preview" style="position: absolute; top: 10px; right: 10px;">Close</button>
        <div id="preview-content"></div>
    </div>
</div>

@section Styles {
    <style>
        #images-list {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }

        .image-item {
            cursor: grab;
        }

        .sortable-chosen {
            opacity: 0.6;
        }

        .sortable-ghost {
            border: 2px dashed #007bff;
        }
    </style>
}

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script src="https://cdn.tiny.cloud/1/5f03jnyxt3mkb0yuyavvuvvobp0a9y3zrrp1oqhu89aiwgmr/tinymce/6/tinymce.min.js" referrerpolicy="origin"></script>
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>

    <script>
        tinymce.init({
            selector: 'textarea.rich-text-editor',
            height: 300,
            menubar: false,
            plugins: 'link image lists code table',
            toolbar: 'undo redo | blocks | bold italic underline | alignleft aligncenter alignright | bullist numlist | link image | code',
            block_formats: 'Paragraph=p; Heading 1=h1; Heading 2=h2; Heading 3=h3; Heading 4=h4',
            content_style: 'body { font-family: Arial, sans-serif; line-height: 1.6; font-size: 16px; }'
        });

        // Layout type logic
        document.addEventListener('DOMContentLoaded', function () {
            const layoutTypeSelect = document.getElementById('LayoutType');
            const image1Group = document.getElementById('image1Group');
            const image2Group = document.getElementById('image2Group');
            const textContentGroup = document.getElementById('textContentGroup');
            const galleryGroup = document.getElementById('galleryGroup');

            function toggleFields() {
                const type = layoutTypeSelect.value;
                image1Group.style.display = 'block';
                image2Group.style.display = 'block';
                textContentGroup.style.display = 'block';
                galleryGroup.style.display = 'none';

                switch (type) {
                    case 'layout-type-6':
                        image1Group.style.display = 'none';
                        image2Group.style.display = 'none';
                        break;
                    case 'layout-type-7':
                        textContentGroup.style.display = 'none';
                        image2Group.style.display = 'none';
                        break;
                    case 'layout-type-3':
                        break;
                    case 'layout-type-8':
                        galleryGroup.style.display = 'block';
                        image1Group.style.display = 'none';
                        image2Group.style.display = 'none';
                        textContentGroup.style.display = 'none';
                        break;
                    default:
                        image2Group.style.display = 'none';
                        break;
                }
            }

            setTimeout(toggleFields, 1000);
            layoutTypeSelect.addEventListener('change', toggleFields);
        });

        // SortableJS for drag-and-drop reordering
        new Sortable(document.getElementById('images-list'), {
            animation: 150,
            handle: ".image-item",
            ghostClass: "sortable-ghost",
            onEnd: function () {
                // Reorder hidden inputs so they follow the new DOM order
                const items = document.querySelectorAll("#images-list .image-item");
                items.forEach((item, index) => {
                    let hidden = item.querySelector("input[name='existingImages']");
                    if (hidden) {
                        hidden.setAttribute("data-order", index);
                    }
                });
            }
        });

        // Remove existing images
        document.getElementById('images-list').addEventListener('click', function (e) {
            if (e.target.classList.contains('remove-btn')) {
                e.target.closest('.image-item').remove();
            }
        });

        // Add new previews
        const fileInput = document.getElementById('images');
        fileInput.addEventListener('change', function (event) {
            for (let i = 0; i < event.target.files.length; i++) {
                let file = event.target.files[i];
                let reader = new FileReader();
                reader.onload = function (e) {
                    let wrapper = document.createElement('div');
                    wrapper.classList.add('col-md-3', 'image-item', 'mb-2');

                    let img = document.createElement('img');
                    img.src = e.target.result;
                    img.classList.add('thumb-img');
                    img.style.width = "200px";
                    img.style.height = "120px";
                    img.style.objectFit = "cover";

                    let btn = document.createElement('button');
                    btn.type = "button";
                    btn.classList.add('btn', 'btn-warning', 'btn-sm', 'mt-1', 'remove-btn');
                    btn.innerText = "Remove";
                    btn.onclick = () => wrapper.remove();

                    wrapper.appendChild(img);
                    wrapper.appendChild(btn);
                    document.getElementById('images-list').appendChild(wrapper);
                };
                reader.readAsDataURL(file);
            }
        });

        // Image preview logic
        let image1DataUrl = null;
        let image2DataUrl = null;

        function setupImagePreview(fileInputId, previewImgId, dataUrlVar) {
            const fileInput = document.getElementById(fileInputId);
            const previewImg = document.getElementById(previewImgId);

            fileInput.addEventListener('change', function (event) {
                if (event.target.files && event.target.files[0]) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        previewImg.src = e.target.result;
                        previewImg.style.display = 'block';
                        if (dataUrlVar === 'image1') {
                            image1DataUrl = e.target.result;
                        } else if (dataUrlVar === 'image2') {
                            image2DataUrl = e.target.result;
                        }
                    };
                    reader.readAsDataURL(event.target.files[0]);
                }
            });
        }

        setupImagePreview('image1File', 'image1Preview', 'image1');
        setupImagePreview('image2File', 'image2Preview', 'image2');

        // Preview button logic
        document.getElementById('preview-button').addEventListener('click', function () {
            tinymce.triggerSave();
            const form = document.getElementById('edit-form');
            const formData = new FormData(form);
            const blogComponent = {
                Id: formData.get('Id'),
                Title: formData.get('Title'),
                LayoutType: formData.get('LayoutType'),
                TextContent: formData.get('TextContent'),
                Image1Path: image1DataUrl ? image1DataUrl : '@Model.Image1Path',
                Image2Path: image2DataUrl ? image2DataUrl : '@Model.Image2Path',
                Images: []
            };

            // Handle existing images for gallery
            document.querySelectorAll("input[name='existingImages']").forEach(input => {
                blogComponent.Images.push({ ImageUrl: input.value, Title: '', AltText: '' });
            });

            fetch('/Admin/Blogs/Preview',
            {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify(blogComponent)
            })
            .then(response => response.text())
            .then(html => {
                document.getElementById('preview-content').innerHTML = html;
                document.getElementById('preview-popup').style.display = 'block';
            });
        });

        document.getElementById('close-preview').addEventListener('click', function () {
            document.getElementById('preview-popup').style.display = 'none';
        });
    </script>
}