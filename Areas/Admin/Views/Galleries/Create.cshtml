@model GoatSilencerArchitecture.Models.Gallery

@{
    ViewData["Title"] = "Create Gallery";
}

<h1>Create Gallery</h1>

<hr />
<div class="row">
    <div class="col-md-6">
        <form asp-action="Create" method="post" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <input type="hidden" asp-for="Type" value="@(ViewData["GalleryType"] as string)" />

            <div class="form-group">
                <label asp-for="Title" class="control-label"></label>
                <input asp-for="Title" class="form-control" />
                <span asp-validation-for="Title" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <input asp-for="Description" class="form-control" />
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>

            <div class="form-group form-check">
                <input class="form-check-input" asp-for="IsPublished" />
                <label class="form-check-label" asp-for="IsPublished"></label>
            </div>

            <div class="form-group">
                <label asp-for="SortOrder" class="control-label"></label>
                <input asp-for="SortOrder" class="form-control" />
                <span asp-validation-for="SortOrder" class="text-danger"></span>
            </div>

            <!-- Main Image Left upload -->
            <div class="form-group">
                <label>Main Image Left (optional)</label>
                <input type="file" name="MainImageLeftFile" class="form-control" id="mainImageLeftInput" />
                <img id="mainImageLeftPreview" src="#" alt="Image Preview" style="max-width: 150px; max-height: 150px; margin-top: 10px; display: none;" />
            </div>

            <!-- Main Image Top Right upload -->
            <div class="form-group">
                <label>Main Image Top Right (optional)</label>
                <input type="file" name="MainImageTopRightFile" class="form-control" id="mainImageTopRightInput" />
                <img id="mainImageTopRightPreview" src="#" alt="Image Preview" style="max-width: 150px; max-height: 150px; margin-top: 10px; display: none;" />
            </div>

            <!-- Main Image Bottom Right upload -->
            <div class="form-group">
                <label>Main Image Bottom Right (optional)</label>
                <input type="file" name="MainImageBottomRightFile" class="form-control" id="mainImageBottomRightInput" />
                <img id="mainImageBottomRightPreview" src="#" alt="Image Preview" style="max-width: 150px; max-height: 150px; margin-top: 10px; display: none;" />
            </div>

            <hr />
            <h3>Upload Additional Images</h3>
            <div class="form-group">
                <label>Image Files</label>
                <input type="file" name="files" class="form-control" multiple id="additionalImagesInput" />
                <small class="form-text text-muted">You can select multiple images.</small>
                <div id="additionalImagesPreview" class="d-flex flex-wrap mt-2"></div>
            </div>

            <input type="submit" value="Create" class="btn btn-primary mt-3" />
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        function setupImagePreview(inputId, previewId) {
            const input = document.getElementById(inputId);
            const preview = document.getElementById(previewId);

            input.addEventListener('change', function() {
                if (this.files && this.files[0]) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        preview.src = e.target.result;
                        preview.style.display = 'block';
                    };
                    reader.readAsDataURL(this.files[0]);
                } else {
                    preview.src = '#';
                    preview.style.display = 'none';
                }
            });
        }

        setupImagePreview('mainImageLeftInput', 'mainImageLeftPreview');
        setupImagePreview('mainImageTopRightInput', 'mainImageTopRightPreview');
        setupImagePreview('mainImageBottomRightInput', 'mainImageBottomRightPreview');

        // For additional images
        const additionalImagesInput = document.getElementById('additionalImagesInput');
        const additionalImagesPreview = document.getElementById('additionalImagesPreview');

        additionalImagesInput.addEventListener('change', function() {
            additionalImagesPreview.innerHTML = ''; // Clear previous previews
            if (this.files) {
                Array.from(this.files).forEach(file => {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        const img = document.createElement('img');
                        img.src = e.target.result;
                        img.style.maxWidth = '100px';
                        img.style.maxHeight = '100px';
                        img.style.margin = '5px';
                        img.alt = 'Image Preview';
                        additionalImagesPreview.appendChild(img);
                    };
                    reader.readAsDataURL(file);
                });
            }
        });
    </script>
}
